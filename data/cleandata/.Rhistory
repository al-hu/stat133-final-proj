p1 <- c(x1, y1)
p2 <- c(x2, y2)
find_distance <- function(p1, p2){
d <- sqrt(p1[1] - p2[1])^2 + (p2[2] - p1[1])^2
return(d)
}
p1 <- c(x1, y1)
p2 <- c(x2, y2)
# your find_distance() function
p1 <- c(x1 = 1, y1 = 1)
p2 <- c(x2 = 1, y2 = 1)
find_distance <- function(p1, p2){
d <- sqrt(p1[1] - p2[1])^2 + (p2[2] - p1[1])^2
return(d)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
# p1 <- c(1, 10)
# p2 <- c(10, 20)
# find_distance(p1, p2)
p1 <- c(x1 = 1, y1 = 10)
p2 <- c(x2 = 10, y2 = 20)
find_distance <- function(p1, p2){
d <- sqrt(p1[1] - p2[1])^2 + (p2[2] - p1[1])^2
return(d)
}
p1 <- c(x1 = 1, y1 = 10)
p2 <- c(x2 = 10, y2 = 20)
find_distance <- function(p1, p2){
d <- sqrt(p1[1] - p2[1])^2 + (p2[2] - p1[1])^2
return(d)
}
p1 <- c(x1 = 1, y1 = 1)
p2 <- c(x2 = 1, y2 = 1)
find_distance <- function(p1, p2){
d <- sqrt(p1[1] - p2[1])^2 + (p2[2] - p1[1])^2
return(d)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
# p1 <- c(1, 10)
# p2 <- c(10, 20)
# find_distance(p1, p2)
p1 <- c(x1 = 1, y1 = 10)
p2 <- c(x2 = 10, y2 = 20)
find_distance <- function(p1, p2){
d <- sqrt(x1 - x2)^2 + (y2 - y1)^2
return(d)
}
# your circle_area() function
circle_area <- function(radius = 1){
if(radius < 0) {
stop("'radius' must be >= 0")
} else {
out <- (radius^2)*pi
}
return(out)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
# p1 <- c(1, 10)
# p2 <- c(10, 20)
# find_distance(p1, p2)
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_distance(p1, p2)
# your find_distance() function
p1 <- c(x1 = 1, y1 = 1)
p2 <- c(x2 = 1, y2 = 1)
find_distance <- function(p1, p2){
d <- sqrt(p1[1] - p2[1])^2 + (p2[2] - p1[1])^2
return(d)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_distance(p1, p2)
# your find_distance() function
p1 <- c(x1 = 1, y1 = 1)
p2 <- c(x2 = 1, y2 = 1)
find_distance <- function(p1, p2){
d <- sqrt(p1[1] - p2[1])^2 + (p2[2] - p1[1])^2
return(d)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_distance(p1, p2)
# your find_distance() function
p1 <- c(x1 = 1, y1 = 1)
p2 <- c(x2 = 1, y2 = 1)
find_distance <- function(p1, p2){
d <- sqrt(p1[1] - p2[1])^2 + (p2[2] - p1[1])^2
return(d)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_distance(p1, p2)
View(find_distance)
# your find_distance() function
p1 <- c(1, 1)
p2 <- c(1, 1)
find_distance <- function(p1, p2){
d <- sqrt(p1[1] - p2[1])^2 + (p2[2] - p1[1])^2
return(d)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_distance(p1, p2)
p1[1]
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_distance(p1, p2)
# your find_distance() function
p1 <- c(1, 1)
p2 <- c(1, 1)
find_distance <- function(p1, p2){
d <- sqrt((p1[1] - p2[1])^2 + (p2[2] - p1[1])^2)
return(d)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_distance(p1, p2)
# your find_distance() function
p1 <- c(1, 1)
p2 <- c(1, 1)
find_distance <- function(p1, p2){
d <- sqrt((p2[1] - p1[1])^2 + (p2[2] - p1[1])^2)
return(d)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_distance(p1, p2)
# your find_distance() function
p1 <- c(1, 1)
p2 <- c(1, 1)
find_distance <- function(p1, p2){
d <- sqrt((p2[1] - p1[1])^2 + (p2[2] - p1[1])^2)
return(d)
}
# your find_distance() function
find_distance <- function(p1, p2){
d <- sqrt((p2[1] - p1[1])^2 + (p2[2] - p1[1])^2)
return(d)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_distance(p1, p2)
# your find_distance() function
find_distance <- function(p1, p2){
d <- sqrt((p2[1] - p1[1])^2 + (p2[2] - p1[2])^2)
return(d)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_distance(p1, p2)
# your find_midpoint() function
find_midpoint <- function(p1, p2){
p = left( frac{p1[1] + p2[1]}{2}, frac{p1[2] + p2[2]}{2} right)
}
# your find_midpoint() function
find_midpoint <- function(p1, p2){
p <- c((p1[1] + p2[1])/2, (p1[2] + p2[2])/2)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_midpoint(p1, p2)
# your find_midpoint() function
find_midpoint <- function(p1, p2){
p <- c((p1[1] + p2[1])/2, (p1[2] + p2[2])/2)
return(p)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_midpoint(p1, p2)
# your find_slope() function
find_slope <- function(p1, p2){
s <- (p2[2] - p1[2])/(p2[1]-p1[1])
return(s)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_slope(p1, p2)
# your find_intercept() function
find_intercept <- function(p1, p2){
i <- p1[2] - [(p2[2] - p1[2])/(p2[1]-p1[1])]*p1[1]
return(i)
}
# your find_intercept() function
find_intercept <- function(p1, p2){
i <- p1[2] - {(p2[2] - p1[2])/(p2[1]-p1[1])}*p1[1]
return(i)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_intercept(p1, p2)
# your find_intercept() function
find_intercept <- function(p1, p2){
i <- p1[2] - find_slope*p1[1]
return(i)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_intercept(p1, p2)
# your find_intercept() function
find_intercept <- function(p1, p2){
i <- p1[2] - find_slope * p1[1]
return(i)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_intercept(p1, p2)
# your find_intercept() function
find_intercept <- function(p1, p2){
i <- p1[2] - find_slope(p1, p2) * p1[1]
return(i)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
find_intercept(p1, p2)
# your find_line() function
find_line(p1, p2){
line <- find_slope*x + find_intercept
return(line)
}
# your find_line() function
find_line(p1, p2){
slope <- find_slope
intercept <- find_intercept
return(line)
}
# your find_line() function
find_line(p1, p2){
slope <- find_slope
intercept <- find_intercept
return(slope, intercept)
}
# your find_line() function
find_line(p1, p2){
slope <- find_slope
intercept <- find_intercept
return(slope)
return(intercept)
}
# your find_line() function
find_line(p1, p2){
slope <- find_slope
intercept <- find_intercept
return(slope)
}
# your find_line() function
find_line(p1, p2){
slope <- find_slope
return(slope)
}
# your find_line() function
find_line(p1, p2){
slope <- find_slope
return(slope)
}
# your find_line() function
find_line <- function(p1, p2{
slope <- find_slope
return(slope)
# your find_line() function
find_line <- function(p1, p2){
slope <- find_slope
return(slope)
# your find_line() function
find_line <- function(p1, p2){
slope <- find_slope
return(slope)
}
# your find_line() function
find_line <- function(p1, p2){
slope <- find_slope
intercept <- find_intercept
return(slope)
return(intercept)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
eq <- find_line(p1, p2)
eq$intercept
eq$slope
# your find_line() function
find_line <- function(p1, p2){
slope <- find_slope(p1, p2)
intercept <- find_intercept(p1, p2)
return(slope)
return(intercept)
}
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
eq <- find_line(p1, p2)
eq$intercept
eq$slope
eq <- find_line(p1, p2)
p1 <- c(1, 10)
p2 <- c(10, 20)
eq <- find_line(p1, p2)
# your find_line() function
find_line <- function(p1, p2){
slope <- find_slope(p1, p2)
intercept <- find_intercept(p1, p2)
return(slope)
return(intercept)
}
eq <- find_line(p1, p2)
# NOTE: Uncomment the following lines and then knit this file to check your function is working as required
p1 <- c(1, 10)
p2 <- c(10, 20)
eq <- find_line(p1, p2)
eq$intercept
eq$slope
sample(die, size = 4)
roll <- function(die = 1:6, times = 1) {
sample(die, size = times, replace = TRUE)
}
sample(die, size = 4)
sample(die, size = times, replace = TRUE)
roll <- function(die = 1:6, times = 1) {
sample(die, size = times, replace = TRUE)
}
die = 1:6
sample(die, size = 4)
die = 1:6
die = 1:6
roll <- function(die = 1:6, times = 1) {
sample(die, size = times, replace = TRUE
prob = rep(1/6, 6))
}
roll <- function(die = 1:6, times = 1) {
sample(die, size = times, replace = TRUE,
prob = rep(1/6, 6))
}
roll <- function(die = 1:6, times = 1) {
sample(die, size = times, replace = TRUE)
}
roll(times = 10)
roll(times = 100)
roll1000 <- roll(times = 1000)
hist(roll1000)
hist(roll1000, col = "gray80")
num_sixes <- function(x) {
sum(x == 6)
}
num_sixes(roll1000)
num_sixes(roll1000)
roll <- function(die = 1:6, times = 1) {
sample(die, size = times, replace = TRUE)
}
roll1000 <- roll(times = 1000)
num_sixes <- function(x) {
sum(x == 6)
}
num_sixes(roll1000)
num_sixes(roll1000)
num_sixes <- function(x) {
sum(x == 6)
}
num_sixes(roll1000)
roll <- function(die = 1:6, times = 1) {
sample(die, size = times, replace = TRUE)
}
roll1000 <- roll(times = 1000)
num_sixes(roll1000)
roll <- function(die = 1:6, times = 1) {
sample(die, size = times, replace = TRUE)
}
roll1000 <- roll(times = 1000)
num_sixes <- function(x) {
sum(x == 6)
}
num_sixes(roll1000)
games <- 10
wager <- 1
set.seed(1234)
roll(times = 5)
rolls <- roll(die = 1:6, times = 4 * games)
outputs <- matrix(rolls, nrow = games, ncol = 4, byrow = TRUE)
outputs
rolls
rolls <- roll(die = 1:6, times = 4 * games)
rolls
head(outputs)
dim(outputs)
sixes <- apply(outputs, 1, num_sixes)
apply(X =  outputs, MARGIN = 1, FUN = num_sixes)
apply(outputs, function(x) sum(x == 6))
apply(X =  outputs, MARGIN = 1, FUN = num_sixes)
losses <- sum(sixes == 0)
sum(sixes == 0) / games
gain <- wager * (wins - losses)
wins <- games - losses
gain <- wager * (wins - losses)
gain
hist(gain)
barplot(round(table(sixes) / games, 2),
las = 1, col = "gray70", border = NA,
xlab = "Number of sixes",
ylab = "relative frequency",
main = "Distribution of sixes")
library(shiny)
# roll a die a given number of times
roll <- function(die = 1:6, times = 1) {
sample(die, size = times, replace = TRUE)
}
roll1000 <- roll(times = 1000)
hist(roll1000)
hist(roll1000, col = "gray80")
roll <- function(die = 1:6, times = 1) {
sample(die, size = times, replace = TRUE,
prob = rep(1/6, 6))
}
# how many sixes in a vector of rolls
num_sixes <- function(x) {
sum(x == 6)
}
num_sixes(roll1000)
games <- 1000
wager <- 1
set.seed(1234)
roll(times = 5)
rolls <- roll(die = 1:6, times = 4 * games)
rolls
# we use byrow = TRUE since it represents four rolls are in a game
outputs <- matrix(rolls, nrow = games, ncol = 4, byrow = TRUE)
outputs
dim(outputs)
head(outputs)
sixes <- apply(outputs, 1, num_sixes)
apply(X =  outputs, MARGIN = 1, FUN = num_sixes)
apply(outputs, function(x) sum(x == 6))
# number of loss of games (number of sixes equals to 0)
losses <- sum(sixes == 0)
#The probability of no  sixes
sum(sixes == 0) / games
wins <- games - losses
gain <- wager * (wins - losses)
gain
barplot(round(table(sixes) / games, 2),
las = 1, col = "gray70", border = NA,
xlab = "Number of sixes",
ylab = "relative frequency",
main = "Distribution of sixes")
sum(runif(100))
sum(runif(100))
sum(runif(100))
sum(runif(100))
set.seed(1)
sum(runif(100))
sum(runif(100))
set.seed(200)
sum(runif(100))
sum(runif(100))
runApp('Desktop/lab09_bcourses')
print(source('Desktop/app1.R')$value)
setwd("/Users/Nicole/Desktop/stat133-final-proj/data/cleandata")
roster_salary_stats <- read.csv("roster-salary-stats.csv")
str(roster_salary_stats)
str(roster_salary_stats)
setwd("/Users/Nicole/Desktop/stat133-final-proj/data/cleandata")
roster_salary_stats <- read.csv("roster-salary-stats.csv")
str(roster_salary_stats)
View(roster_salary_stats)
View(roster_salary_stats)
lapply(roster_salary_stats[2:38], summary)
str(roster_salary_stats)
roster_salary_stats <- as.factor(roster_salary_stats$Number)
str(roster_salary_stats)
str(roster_salary_stats)
roster_salary_stats <- read.csv("roster-salary-stats.csv")
as.factor(roster_salary_stats$Number)
str(roster_salary_stats)
factorized <- as.factor(roster_salary_stats$Number)
roster_salary_stats$Number <- factorized
str(roster_salary_stats)
lapply(roster_salary_stats[2:38], summary)
sink(file = 'eda-output.txt', append = TRUE)
sink(file = 'eda-output.txt', append = TRUE)
lapply(roster_salary_stats[2:38], summary)
sink(file = 'eda-output.txt', append = TRUE)
sink(file = 'eda-output.txt', append = TRUE)
lapply(roster_salary_stats[2:38], summary)
setwd("/Users/Nicole/Desktop/stat133-final-proj/data/cleandata")
roster_salary_stats <- read.csv("roster-salary-stats.csv")
View(roster_salary_stats)
View(roster_salary_stats)
roster_salary_stats <- read.csv("roster-salary-stats.csv")
roster_salary_stats <- read.csv("roster-salary-stats.csv")
setwd("/Users/Nicole/Desktop/stat133-final-proj/data/cleandata")
roster_salary_stats <- read.csv("roster-salary-stats.csv")
View(roster_salary_stats)
View(roster_salary_stats)
str(roster_salary_stats)
str(roster_salary_stats)
str(roster_salary_stats)
