circle_area <- function(radius = 1) {
if (radius < 0) {
stop()
} else {
rv = radius^2 * pi
return(rv)
}
}
circle_area()
circle_area(radius = 3)
circle_area(radius = -2)
cyl_area() = function(radius = 1, height = 1) {
if (radius < 0 | height < 0) {
stop()
} else {
a_circle = circle_area(radius)
vol = a_circle * height
return(vol)
}
}
cyl_area = function(radius = 1, height = 1) {
if (radius < 0 | height < 0) {
stop()
} else {
a_circle = circle_area(radius)
vol = a_circle * height
return(vol)
}
}
cyl_area()
cyl_area(radius = 2, height = 3)
cyl_area(radius = -2, height = 1)
cyl_area(radius = 2, height = -1)
cyl_area()
cyl_area(radius = 2, height = 3)
cyl_area(radius = -2, height = 1)
cyl_area(radius = 2, height = -1)
cyl_area(radius = -2, height = -1)
cyl_area = function(radius = 1, height = 1) {
if (radius < 0 | height < 0) {
stop()
} else {
a_circle = circle_area(radius) * 2
vol = 2 * pi * radius * height
tot_vol = a_circle + vol
return(tot_vol)
}
}
cyl_area()
cyl_area(radius = 2, height = 3)
cyl_area(radius = -2, height = 1)
cyl_area(radius = 2, height = -1)
cyl_area(radius = -2, height = -1)
cyl_area = function(radius = 1, height = 1) {
if (radius < 0 | height < 0) {
stop()
} else {
a_circle = circle_area(radius) * 2
a_rect = 2 * pi * radius * height
tot_area = a_circle + a_rect
return(tot_area)
}
}
cyl_area()
cyl_area(radius = 2, height = 3)
cyl_area(radius = -2, height = 1)
cyl_area(radius = 2, height = -1)
cyl_area(radius = -2, height = -1)
cyl_volume = function(radius = 1, height = 1) {
if (radius < 0 | height < 0) {
stop()
} else {
a_circle = circle_area(radius)
vol = a_circle * height
return(vol)
}
}
cyl_volume()
cyl_volume(radius = 3, height = 10)
cyl_volume(height = 10, radius = 3)
circle_area = function(radius = 1) {
circle_area = function(radius = 1) {
if (radius < 0) {
stop()
} else {
rv = radius^2 * pi
return(rv)
}
}
circle_area()
circle_area(radius = 3)
circle_area(radius = -2)
circle_area()
circle_area(radius = 3)
circle_area <- function(radius = 1) {
if (radius < 0) {
stop()
} else {
rv = radius^2 * pi
return(rv)
}
}
circle_area()
circle_area(radius = 3)
circle_area(radius = -2)
cyl_area(radius = 2, height = 3)
circle_area <- function(radius = 1) {
if (radius < 0) {
stop()
} else {
rv = radius^2 * pi
return(rv)
}
}
circle_area()
circle_area(radius = 3)
cyl_volume(radius = 3, height = 10)
library(xtable)
circle_area <- function(radius = 1) {
if (radius < 0) {
stop()
} else {
rv = radius^2 * pi
return(rv)
}
}
circle_area()
circle_area(radius = 3)
```{r, error = TRUE}
# your circle_area() function
circle_area <- function(radius = 1) {
if (radius < 0) {
stop()
} else {
rv = radius^2 * pi
return(rv)
}
}
```
Test your function:
```{r error = TRUE}
circle_area()
circle_area(radius = 3)
circle_area(radius = -2)
cyl_area = function(radius = 1, height = 1) {
cyl_area = function(radius = 1, height = 1) {
if (radius < 0 | height < 0) {
stop()
} else {
a_circle = circle_area(radius) * 2
a_rect = 2 * pi * radius * height
tot_area = a_circle + a_rect
return(tot_area)
}
}
cyl_area()
cyl_area(radius = 2, height = 3)
```{r error = TRUE}
cyl_area()
cyl_area(radius = 2, height = 3)
cyl_area(radius = -2, height = 1)
cyl_area(radius = 2, height = -1)
cyl_area(radius = -2, height = -1)
```{r, error=TRUE}
# your cyl_volume() function
cyl_volume = function(radius = 1, height = 1) {
if (radius < 0 | height < 0) {
stop()
} else {
a_circle = circle_area(radius)
vol = a_circle * height
return(vol)
}
}
```
Test your function:
```{r error = TRUE}
cyl_volume()
cyl_volume(radius = 3, height = 10)
cyl_volume(height = 10, radius = 3)
```
-----
\newpage
## Currency Converter
Consider the exchange rates of one US dollar for the following currencies
(source: XE currency table US dollar, 09-20-2016):
| Currency         | name     | rate    |
cyl_area = function(radius = 1, height = 1) {
if (radius < 0 | height < 0) {
stop()
} else {
a_circle = circle_area(radius) * 2
a_rect = circle_area(radius) * height
tot_area = a_circle + a_rect
return(tot_area)
}
}
cyl_area()
cyl_area(radius = 2, height = 3)
cyl_area()
circle_area(radius = 3)
circle_area <- function(radius = 1) {
if (radius < 0) {
stop()
} else {
rv = radius^2 * pi
return(rv)
}
}
cyl_area = function(radius = 1, height = 1) {
if (radius < 0 | height < 0) {
stop()
} else {
a_circle = circle_area(radius) * 2
a_rect = 2 * pi * radius * height
tot_area = a_circle + a_rect
return(tot_area)
}
}
cyl_area()
cyl_area(radius = 2, height = 3)
cyl_area(radius = -2, height = 1)
cyl_area(radius = 2, height = -1)
circle_area <- function(radius = 1) {
if (radius < 0) {
stop("negative radius, must be positive.")
} else {
rv = radius^2 * pi
return(rv)
}
}
circle_area(radius = -2)
exchange <- function(amount = 1, from = "dollar", to = "euro") {
# vector of dollar exchange rates
x <- c(
dollar = 1,
euro = 0.89,
pound = 0.77,
yen = 101.69,
yuan = 6.67,
won = 1118.21,
rupee = 66.98,
peso = 19.82,
real = 3.25)
# write the rest of the code of your function
# ...
}
exchange()
```{r}
exchange()
exchange <- function(amount = 1, from = "dollar", to = "euro") {
# vector of dollar exchange rates
x <- c(
dollar = 1,
euro = 0.89,
pound = 0.77,
yen = 101.69,
yuan = 6.67,
won = 1118.21,
rupee = 66.98,
peso = 19.82,
real = 3.25)
return(peso)
# write the rest of the code of your function
# ...
}
exchange()
exchange <- function(amount = 1, from = "dollar", to = "euro") {
# vector of dollar exchange rates
x <- c(
dollar = 1,
euro = 0.89,
pound = 0.77,
yen = 101.69,
yuan = 6.67,
won = 1118.21,
rupee = 66.98,
peso = 19.82,
real = 3.25)
return(x[peso])
# write the rest of the code of your function
# ...
}
exchange <- function(amount = 1, from = "dollar", to = "euro") {
# vector of dollar exchange rates
x <- c(
dollar = 1,
euro = 0.89,
pound = 0.77,
yen = 101.69,
yuan = 6.67,
won = 1118.21,
rupee = 66.98,
peso = 19.82,
real = 3.25)
return(x[peso])
# write the rest of the code of your function
# ...
}
exchange()
exchange <- function(amount = 1, from = "dollar", to = "euro") {
# vector of dollar exchange rates
x <- c(
dollar = 1,
euro = 0.89,
pound = 0.77,
yen = 101.69,
yuan = 6.67,
won = 1118.21,
rupee = 66.98,
peso = 19.82,
real = 3.25)
return(x)
# write the rest of the code of your function
# ...
}
exchange()
exchange <- function(amount = 1, from = "dollar", to = "euro") {
# vector of dollar exchange rates
x <- c(
dollar = 1,
euro = 0.89,
pound = 0.77,
yen = 101.69,
yuan = 6.67,
won = 1118.21,
rupee = 66.98,
peso = 19.82,
real = 3.25)
return(x["dollar"])
# write the rest of the code of your function
# ...
}
exchange()
exchange <- function(amount = 1, from = "dollar", to = "euro") {
# vector of dollar exchange rates
x <- c(
dollar = 1,
euro = 0.89,
pound = 0.77,
yen = 101.69,
yuan = 6.67,
won = 1118.21,
rupee = 66.98,
peso = 19.82,
real = 3.25)
to_dollar = amount / x[from]
rv = to_dolloar * x[to]
return(rv)
# write the rest of the code of your function
# ...
}
exchange()
exchange <- function(amount = 1, from = "dollar", to = "euro") {
# vector of dollar exchange rates
x <- c(
dollar = 1,
euro = 0.89,
pound = 0.77,
yen = 101.69,
yuan = 6.67,
won = 1118.21,
rupee = 66.98,
peso = 19.82,
real = 3.25)
to_dollar = amount / x[from]
rv = to_dollar * x[to]
return(rv)
}
exchange()
exchange(123)
exchange(123, "yen", "won")
exchange(123, "yen", "won")
exchange()
exchange(amount = 10, from = 'euro', to = 'peso')
find_distance <- funciton(p1, p2) {
x_dif = p1[1] - p2[1]
y_dif = p1[2] - p2[2]
x = x_dif^2
y = y_dif^2
distance = sqrt(x + y)
return(distance)
}
find_distance <- function(p1, p2) {
x_dif = p1[1] - p2[1]
y_dif = p1[2] - p2[2]
x = x_dif^2
y = y_dif^2
distance = sqrt(x + y)
return(distance)
}
p1 <- c(1, 10)
p2 <- c(10, 20)
find_distance(p1, p2)
find_midpoint <- function(p1, p2) {
sum_x = p1[1] + p2[1]
sum_y = p1[2] + p2[2]
half_x = sum_x / 2
half_y = sum_y / 2
midpoint = c(half_x, half_y)
return midpoint
}
find_midpoint <- function(p1, p2) {
sum_x = p1[1] + p2[1]
sum_y = p1[2] + p2[2]
half_x = sum_x / 2
half_y = sum_y / 2
midpoint = c(half_x, half_y)
return(midpoint)
}
p1 <- c(1, 10)
p2 <- c(10, 20)
find_midpoint(p1, p2)
find_slope() <- function(p1, p2) {
diff_y = p1[2] - p2[2]
diff_x = p1[1] - p2[1]
slope = diff_y / diff_x
return(slope)
}
find_slope <- function(p1, p2) {
diff_y = p1[2] - p2[2]
diff_x = p1[1] - p2[1]
slope = diff_y / diff_x
return(slope)
}
p1 <- c(1, 10)
p2 <- c(10, 20)
find_slope(p1, p2)
find_intercept <- function(p1, p2) {
slope = find_slope(p1, p2)
intercept = p1[2] - slope * p1[1]
return(intercept)
}
p1 <- c(1, 10)
p2 <- c(10, 20)
find_intercept(p1, p2)
find_intercept <- function(p1, p2) {
slope = find_slope(p1, p2)
intercept = p1[2] - (slope * p1[1])
return(intercept)
}
p1 <- c(1, 10)
p2 <- c(10, 20)
find_intercept(p1, p2)
find_line <- function(p1, p2) {
slope = find_slope(p1, p2)
x_intercept = find_intercept(p1, p2)
rv = c(x_intercept, slope)
names(rv) = c("intercept", "slope")
return(rv)
}
p1 <- c(1, 10)
p2 <- c(10, 20)
eq <- find_line(p1, p2)
eq$intercept
eq$slope
find_line <- function(p1, p2) {
slope = find_slope(p1, p2)
x_intercept = find_intercept(p1, p2)
rv = list(x_intercept, slope)
names(rv) = c("intercept", "slope")
return(rv)
}
p1 <- c(1, 10)
p2 <- c(10, 20)
eq <- find_line(p1, p2)
eq$intercept
eq$slope
info_points <- function(p1, p2) {
distance = find_distance(p1, p2)
midpoint = find_midpoint(p1, p2)
intercept = find_intercept(p1, p2)
slope = find_slope(p1, p2)
rv = list(distance, midpoint, intercept, slope)
names(rv) = c("distance", "midpoint", "intercept", "slope")
return(rv)
}
# # p1 <- c(1, 10)
# # p2 <- c(10, 20)
#
# # results <- info_points(p1, p2)
# # results$distance
# # results$midpoint
# # results$intercept
# # results$slope
p1 <- c(1, 10)
p2 <- c(10, 20)
results <- info_points(p1, p2)
results$distance
results$midpoint
results$intercept
results$slope
root <- "/home/albert/Documents/Albert/Fall16/Stat133/stat133-final-proj"
path_to_file <- "/data/cleandata/roster-salary-stats.csv"
View(read.csv(paste0(root, path_to_file)))
test <- read.csv(paste0(root, path_to_file))
str(test)
library(shiny); print(source('Documents/Albert/Fall16/Stat133/stat133-final-proj/data/cleandata/stats-salaries-shiny.R')$value)
print(source('stats-salaries-shiny.R')$value)
print(source('stats-salaries-shiny.R')$value)
print(source('stats-salaries-shiny.R')$value)
print(source('stats-salaries-shiny.R')$value)
print(source('stats-salaries-shiny.R')$value)
print(source('stats-salaries-shiny.R')$value)
print(source('stats-salaries-shiny.R')$value)
print(source('stats-salaries-shiny.R')$value)
print(source('stats-salaries-shiny.R')$value)
print(source('stats-salaries-shiny.R')$value)
print(source('stats-salaries-shiny.R')$value)
print(source('stats-salaries-shiny.R')$value)
print(source('stats-salaries-shiny.R')$value)
print(source('stats-salaries-shiny.R')$value)
