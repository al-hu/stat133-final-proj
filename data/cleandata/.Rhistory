mapping = aes(x = date, y = height)) +
geom_step(color = "light gray",
show.legend = FALSE,
size = 1.3) +
geom_point(aes(color = country),
show.legend = TRUE) +
ggtitle("Men's High Jump World Records Progression")
plot4 + theme_bw()
# Chunk 37
# Model for women
records_female <- subset(records, gender == 'female')
# regression of 'height' on 'year'
model_women <- lm(height ~ year, data = records_female)
model_women
summary(model_women)
# Chunk 38
# predictions for olympic years
predicted_value_women <- predict(model_women,
data.frame(year = c(2000, 2004,
2008, 2012,
2016)))
predicted_value_women
women_prediction <- data.frame(predicted_value_women,
row.names = c("year 2000", "year 2004",
"year 2008", "year 2012",
"year 2016"))
women_prediction
# Chunk 39
# Model for men
records_male <- subset(records, gender == 'male')
# regression of 'height' on 'year'
model_men <- lm(height ~ year, data = records_male)
model_men
summary(model_men)
# Chunk 40
# predictions for olympic years
predicted_value_men <- predict(model_men,
data.frame(year = c(2000, 2004,
2008, 2012,
2016)))
predicted_value_men
men_prediction <- data.frame(predicted_value_men,
row.names = c("year 2000", "year 2004",
"year 2008", "year 2012",
"year 2016"))
men_prediction
# number of records per decade (1920-1929, 1930-1939, 1940-1949, etc)
# object: per_decade
decade <- cut(records$year, breaks = seq(1910, 2000, 10),
labels = c("1910-1919", "1920-1929", "1930-1939",
"1940-1949", "1950-1959", "1960-1969",
"1970-1979", "1980-1989", "1990-1999"))
per_decade <- records %>%
mutate(decade) %>%
group_by(decade) %>%
summarise(freq =n())
per_decade
# invoke head() on per_decade
head(per_decade)
View(records_old)
# numeric vector 'year'
year <- extract_year_name(clean_date)
year
# number of records per country in descending order
# object: per_country_desc
per_country_desc <- arrange(per_country, desc(freq))
per_country_desc
# invoke head() on per_country_desc
head(per_country_desc)
# number of records per year in descending order
# object: per_year_desc
per_year <- records %>%
group_by(year) %>%
summarise(freq = n())
per_year_desc <- arrange(per_year, desc(freq))
per_year_desc
# invoke head() on per_year_desc
head(per_year_desc)
# number of records per decade (1920-1929, 1930-1939, 1940-1949, etc)
# object: per_decade
decade <- cut(records$year, breaks = seq(1910, 2000, 10),
labels = c("1910-1919", "1920-1929", "1930-1939",
"1940-1949", "1950-1959", "1960-1969",
"1970-1979", "1980-1989", "1990-1999"))
per_decade <- records %>%
mutate(decade) %>%
group_by(decade) %>%
summarise(freq =n())
per_decade
# invoke head() on per_decade
head(per_decade)
View(records_male)
View(records)
# number of records per decade (1920-1929, 1930-1939, 1940-1949, etc)
# object: per_decade
decade <- cut(records$year, breaks = seq(1910, 2000, 10),
labels = c("1910-1919", "1920-1929", "1930-1939",
"1940-1949", "1950-1959", "1960-1969",
"1970-1979", "1980-1989", "1990-1999"), right = FALSE)
per_decade <- records %>%
mutate(decade) %>%
group_by(decade) %>%
summarise(freq =n())
per_decade
# invoke head() on per_decade
head(per_decade)
per_decadec
per_decade
height_unit_conversion <- function(height) {
#Step1: convert meter into feet
height_ft <- height*3.28084
#step2: extract the integer of height in feet
ft_main <- str_extract(height_ft, "[0-9]")
#step3: extract the decimal of height in feet
ft_decimal <- as.numeric(str_extract(height_ft, "\\.[0-9]+"))
}
height_unit_conversion
height_unit_conversion(records$height)
height_unit_conversion(records$height)
height_unit_conversion <- function(height) {
# To convert the portion of meter into feet
height_ft <- height*3.28084
# To extract the integer portion of height in feet
ft_main <- str_extract(height_ft, "[0-9]")
# To extract the decimal portion of height in feet
ft_decimal <- as.numeric(str_extract(height_ft, "\\.[0-9]+"))
}
height_conversion <- function(height)
height_unit_conversion <- function(col_name = height) {
# To convert the portion of meter into feet
height_ft <- (col_name)*3.28084
# To extract the integer portion of height in feet
ft_main <- str_extract(height_ft, "[0-9]")
# To extract the decimal portion of height in feet
ft_decimal <- as.numeric(str_extract(height_ft, "\\.[0-9]+"))
}
height_conversion <- function(height)
height_unit_conversion <- function(col_name = height) {
# To convert the portion of meter into feet
height_ft <- (col_name)*3.28084
# To extract the integer portion of height in feet
ft_main <- str_extract(height_ft, "[0-9]")
# To extract the decimal portion of height in feet
ft_decimal <- as.numeric(str_extract(height_ft, "\\.[0-9]+"))
height_new <- paste0(ft_main, ft_decimal, sep = 'm')
}
height_unit_conversion(height)
height_unit_conversion(height)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
# use this code chunk to load all the packages that you will be using
# (do not include commands to install the packages)
library(stringr)
library(ggplot2)
library(dplyr)
library(readr)
# Chunk 3
# source your functions
source('~/Desktop/stat133-midterm-function-Ming Ho Cheung.R')
# Chunk 4
# read in womens-high-jump-raw.csv
womens_high_jump <- read_csv(
'~/Desktop/womens-high-jump-raw.csv',
col_names = TRUE)
# check structure with str()
str(womens_high_jump)
# Chunk 5
# read in mens-high-jump-raw.csv
mens_high_jump <- read_csv(
'~/Desktop/mens-high-jump-raw.csv',
col_names = TRUE)
# check structure with str()
str(mens_high_jump)
# Chunk 6
# vector 'height' with numeric values of height in meters
height <- extract_height_value(womens_high_jump$Height)
height
# Chunk 7
# vector 'athlete' with character values of athlete's name
athlete <- extract_athlete_name(womens_high_jump$Athlete)
athlete
# Chunk 8
# character vector 'country' with country abbreviations
country <- extract_country_name(womens_high_jump$Athlete)
country
# Chunk 9
# numeric vector 'day'
day <- extract_day_number(womens_high_jump$Date)
day
# Chunk 10
# character vector 'month'
month <- extract_month_name(womens_high_jump$Date)
month
# Chunk 11
# numeric vector 'year'
year <- extract_year_name(womens_high_jump$Date)
year
# Chunk 12
# 'new_date' vector of class "Date"
new_date <- reformat_date(womens_high_jump$Date)
new_date
# Chunk 13
# character vector 'city' with name of city
city <- remove_brackets(womens_high_jump$Place)
city
# Chunk 14
# vector 'gender'
gender <- rep("female", each = 56)
gender
# Chunk 15
# data frame 'womens'
date <- new_date
womens <- data.frame(height, athlete, gender, country,
city, date, day, month, year,
stringsAsFactors = FALSE)
str(womens)
# Chunk 16
# vector 'height' with numeric values of height in meters
height <- extract_height_value(mens_high_jump$Height)
height
# Chunk 17
# vector 'athlete' with character values of athlete's name
athlete <- extract_athlete_name(mens_high_jump$Athlete)
athlete
# Chunk 18
# character vector 'country' with country abbreviations
country <- extract_country_name(mens_high_jump$Athlete)
country
# Chunk 19
# character vector 'city' with name of city
city <- men_extract_city_name(mens_high_jump$Venue)
city
# Chunk 20
# vector 'clean_date'
clean_date <- remove_brackets(mens_high_jump$Date)
clean_date
# Chunk 21
# numeric vector 'day'
day <- extract_day_number(clean_date)
day
# Chunk 22
# character vector 'month'
month <- extract_month_name(clean_date)
month
# Chunk 23
# numeric vector 'year'
year <- extract_year_name(clean_date)
year
# Chunk 24
# 'new_date' vector of class "Date"
new_date <- reformat_date(mens_high_jump$Date)
new_date
# Chunk 25
# vector 'gender'
gender <- rep("male", each = 40)
gender
# Chunk 26
# data frame 'mens'
date <- new_date
mens <- data.frame(height, athlete, gender, country,
city, date, day, month, year,
stringsAsFactors = FALSE)
str(mens)
# Chunk 27
# new data frame 'records'
records_old <- rbind(womens, mens)
records_old$gender <- as.factor(records_old$gender)
records_old$country <- as.factor(records_old$country)
records <- records_old
str(records)
# Chunk 28
# number of records per country
# object: per_country
per_country <- records %>%
group_by(country) %>%
summarise(freq = n())
per_country
# invoke head() on per_country
head(per_country)
# Chunk 29
# number of records per country in descending order
# object: per_country_desc
per_country_desc <- arrange(per_country, desc(freq))
per_country_desc
# invoke head() on per_country_desc
head(per_country_desc)
# Chunk 30
# number of records per year in descending order
# object: per_year_desc
per_year <- records %>%
group_by(year) %>%
summarise(freq = n())
per_year_desc <- arrange(per_year, desc(freq))
per_year_desc
# invoke head() on per_year_desc
head(per_year_desc)
# Chunk 31
# number of records by gender
# object: by_gender
by_gender <- records %>%
group_by(gender) %>%
summarise(freq = n())
# invoke head() on by_gender
head(by_gender)
# Chunk 32
# number of records per decade (1920-1929, 1930-1939, 1940-1949, etc)
# object: per_decade
decade <- cut(records$year, breaks = seq(1910, 2000, 10),
labels = c("1910-1919", "1920-1929", "1930-1939",
"1940-1949", "1950-1959", "1960-1969",
"1970-1979", "1980-1989", "1990-1999"), right = FALSE)
per_decade <- records %>%
mutate(decade) %>%
group_by(decade) %>%
summarise(freq =n())
per_decade
# invoke head() on per_decade
head(per_decade)
# Chunk 33
# step-line plot, with points, showing the progression of records
# (lines colored by gender)
# (the default ggplot color values are: '#00BFC4', '#F8766D')
plot1 <- ggplot(data = records,
mapping = aes(x = date, y = height)) +
geom_point(aes(color = records$gender),
show.legend = FALSE) +
geom_step(aes(color = records$gender),
show.legend = FALSE) +
ggtitle("High Jump World Records Progression (by gender)")
plot1 + annotate("text",x = as.Date(c('1989-08-26')),y = 2.00,
label = 'women',color = '#F8766D') +
annotate("text",x = as.Date(c('1990-07-29')),y = 2.36,
label = 'men', color = '#00BFC4') +
theme_minimal()
# Chunk 34
# step-line plot, with points, showing the progression of records
# (facetting by gender)
plot2 <- ggplot(data = records,
mapping = aes(x = date, y = height)) +
geom_point(aes(color = records$gender),
show.legend = FALSE) +
geom_step(aes(color = records$gender),
show.legend = FALSE) +
ggtitle("High Jump World Records Progression (by gender)")
plot2 + facet_grid(. ~ gender)
# Chunk 35
# step-line plot, with points, showing the progression of women records
# (points colored by country)
plot3 <- ggplot(data = womens,
mapping = aes(x = date, y = height)) +
geom_step(color = "light gray",
show.legend = FALSE,
size = 1.3) +
geom_point(aes(color = country),
show.legend = TRUE) +
ggtitle("Women's High Jump World Records Progression")
plot3 + theme_bw()
# Chunk 36
# step-line plot, with points, showing the progression of men records
# (points colored by country)
plot4 <- ggplot(data = mens,
mapping = aes(x = date, y = height)) +
geom_step(color = "light gray",
show.legend = FALSE,
size = 1.3) +
geom_point(aes(color = country),
show.legend = TRUE) +
ggtitle("Men's High Jump World Records Progression")
plot4 + theme_bw()
# Chunk 37
# Model for women
records_female <- subset(records, gender == 'female')
# regression of 'height' on 'year'
model_women <- lm(height ~ year, data = records_female)
model_women
summary(model_women)
# Chunk 38
# predictions for olympic years
predicted_value_women <- predict(model_women,
data.frame(year = c(2000, 2004,
2008, 2012,
2016)))
predicted_value_women
women_prediction <- data.frame(predicted_value_women,
row.names = c("year 2000", "year 2004",
"year 2008", "year 2012",
"year 2016"))
women_prediction
# Chunk 39
# Model for men
records_male <- subset(records, gender == 'male')
# regression of 'height' on 'year'
model_men <- lm(height ~ year, data = records_male)
model_men
summary(model_men)
# Chunk 40
# predictions for olympic years
predicted_value_men <- predict(model_men,
data.frame(year = c(2000, 2004,
2008, 2012,
2016)))
predicted_value_men
men_prediction <- data.frame(predicted_value_men,
row.names = c("year 2000", "year 2004",
"year 2008", "year 2012",
"year 2016"))
men_prediction
rm
ls
rm
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("FactoMineR", type = "source")
library(FactoMineR)
install.packages("FactoMineR", dependencies=TRUE, repos='http://cran.rstudio.com/')
setRepositories()
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("FactoMineR")
library(FactoMineR)
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("FactoMineR")
packageurl <- "http://cran.r-project.org/src/contrib/Archive/FactoMineR/FactoMineR_A.B.C.tar.gz"
install.packages(packageurl, contriburl=NULL, type="source")
getwd()
dat <- read.csv("stat133-final-proj/data/cleandata/roster-salary-stats.csv",
row.names = 1,
stringsAsFactors = FALSE)
dat
View(dat)
FTA <- dat$Free.Throw.Attempts
FT <- dat$Free.Throws
FGA <- dat$Field.Goal.Attempts
FG <- dat$Field.Goals
pg <- dat %>%
filter(position == 'PG') %>%
mutate(MFT = FTA - FT) %>%
mutate(MFG = FGA - FG)
library(dplyr)
pg <- dat %>%
filter(position == 'PG') %>%
mutate(MFT = FTA - FT) %>%
mutate(MFG = FGA - FG)
pg <- dat %>%
filter(dat$Position == 'PG') %>%
mutate(MFT = FTA - FT) %>%
mutate(MFG = FGA - FG)
dat %>%
filter(dat$Position == 'PG')
mutate(MFT = FTA - FT)
dat %>%
filter(dat$Position == 'PG') %>%
mutate(MFT = FTA - FT)
dat %>%
filter(dat$Position == 'PG') %>%
mutate(MFT = FTA - FT)
MFT <- FTA - FT
MFT
dat %>%
filter(dat$Position == 'PG') %>%
mutate(MFT = FTA - FT)
str(dat)
pg <- dat %>%
filter(Position == 'PG') %>%
mutate(MFT = Free.Throw.Attempts - Free.Throws) %>%
mutate(MFG = Field.Goal.Attempts - Field.Goals)
pg
library(dplyr)
library(ggplot2)
dat <- read.csv("stat133-final-proj/data/cleandata/roster-salary-stats.csv",
row.names = 1,
stringsAsFactors = FALSE)
pg <- dat %>%
filter(Position == 'PG') %>%
mutate(MFT = Free.Throw.Attempts - Free.Throws) %>%
mutate(MFG = Field.Goal.Attempts - Field.Goals)
View(pg)
pg <- dat %>%
filter(Position == 'PG') %>%
mutate(Missed.Free.Throws = Free.Throw.Attempts - Free.Throws) %>%
mutate(Missed.Field.Goals = Field.Goal.Attempts - Field.Goals)
View(pg)
stats <- c('PTS', 'TRB', 'AST', 'STL', 'BLK', 'MFT', 'MFG', 'TOV')
stats
stats <- c('Points', 'Total.Rebounds', 'Assits',
'Steals', 'Blocks', 'Missed.Free.Throws',
'Missed.Field.Goals', 'Turnovers')
stats
print(round(cor(pg[ ,stats]), 2), print.gap = 3)
pairs(pg[ ,stats], pch = 20)
stats <- c('Points', 'Total.Rebounds', 'Assists',
'Steals', 'Blocks', 'Missed.Free.Throws',
'Missed.Field.Goals', 'Turnovers')
print(round(cor(pg[ ,stats]), 2), print.gap = 3)
pairs(pg[ ,stats], pch = 20)
install.packages("FactoMineR")
setwd("/Users/Nicole/Desktop/stat133-final-proj/data/cleandata")
library(ggplot2)
library(scales)
roster_salary_stats <- read.csv("roster-salary-stats.csv")
factorized <- as.factor(roster_salary_stats$Number)
roster_salary_stats$Number <- factorized
lapply(roster_salary_stats[2:38], summary)
sink(file = 'eda-output.txt', append = TRUE)
lapply(roster_salary_stats[2:38], summary)
pca <- PCA(pg[ ,stats], graph = FALSE)
plot(pca, choix = "var")
install.packages("FactoMineR")
library(FactoMineR)
install.packages("FactoMineR")
